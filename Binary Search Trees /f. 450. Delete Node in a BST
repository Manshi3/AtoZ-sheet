/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* deleteSmallest(TreeNode* root) {
        TreeNode* curr = root->left;
        TreeNode* prev = root;
        while(curr->left != NULL) {
            prev = curr;
            curr = curr->left;
        }
        prev->left = curr->right;
        return curr;
    }
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == NULL) return root;

        // find the target
        if(root->val < key) {
            root->right = deleteNode(root->right, key);
            return root;
        }
        else if(root->val > key) {
            root->left = deleteNode(root->left, key);
            return root;
        }

        // no child or only child
        if(root->left == NULL && root->right == NULL) return NULL;
        else if(root->left == NULL) return root->right;
        else if(root->right == NULL) return root->left;

        if(root->right->left == NULL) {
            root->right->left = root->left;
            return root->right;
        }
        else {
            TreeNode* smallest = deleteSmallest(root->right);
            smallest->left = root->left;
            smallest->right = root->right;
            return smallest;
        }
    }
};
