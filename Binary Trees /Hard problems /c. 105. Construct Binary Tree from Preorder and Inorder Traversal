105. Construct Binary Tree from Preorder and Inorder Traversal

class Solution {
public:
    TreeNode* constructTree(vector<int> &preorder, int prestart, int preend, vector<int> &inorder, int instart, int inend, map<int, int> &mp) {
        if(prestart > preend || instart > inend) return NULL;
        TreeNode* root = new TreeNode(preorder[prestart]);
        int inroot = mp[root->val];
        int numleft = inroot - instart;
        root->left = constructTree(preorder, prestart + 1, prestart + numleft, inorder, instart, inroot - 1, mp);
        root->right = constructTree(preorder, prestart + numleft + 1, preend, inorder, inroot + 1, inend, mp);
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(inorder.size() != preorder.size()) return NULL;
        int prestart = 0, preend = preorder.size() - 1;
        int instart = 0, inend = inorder.size() - 1;
        map<int, int> mp;
        for(int i = instart; i <= inend; i++) 
            mp[inorder[i]] = i;
        return constructTree(preorder, prestart, preend, inorder, instart, inend, mp);
    }
};
