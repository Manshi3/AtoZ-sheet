class Solution {
public:
    vector<int> ans;
    unordered_map<TreeNode*, TreeNode*> parent;
    unordered_set<TreeNode*> visited;

    void findparent(TreeNode* node) {
        if(node == NULL) return;
        if(node->left != NULL) {
            parent[node->left] = node;
            findparent(node->left);
        }
        if(node->right != NULL) {
            parent[node->right] = node;
            findparent(node->right);
        } 
    }
    void dfs(TreeNode* target, int k) {
        if(visited.find(target) != visited.end()) return;
        visited.insert(target);

        if(k == 0) {ans.push_back(target->val); return;}

        if(target->left != NULL) dfs(target->left, k-1);
        if(target->right != NULL) dfs(target->right, k-1);
        if(parent[target] != NULL) dfs(parent[target], k-1); 
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        if(root == NULL) return {};

        findparent(root);
        dfs(target, k);
        return ans;
    }
};
