class Solution {
    void dfs(int node, vector<int> &vis, vector<int> adjlist[]) {
        for(auto it : adjlist[node]) {
            if(vis[it] == 0) {
                vis[it] = 1;
                dfs(it, vis, adjlist);
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        // Adjecentcy list to convert matrix into list
        vector<int> adjlist[n];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(isConnected[i][j] == 1 && i != j) {
                    adjlist[i].push_back(j);
                    adjlist[j].push_back(i);
                }
            }
        }
        // visited array 
        vector<int> vis(n, 0);
        int cnt = 0;
        for(int i = 0; i < n; i++) {
            if(vis[i] == 0) {
                cnt++;
                dfs(i, vis, adjlist);
            }
        }
        return cnt;
    }
};
