given an 1d array, we cant rob in adjesent houses and end and first array is coneenected so either we rob from the start leaving end, or we rob end leaving first. 
we dont know in which we'll get max ans so we make arrays temp in one we start from 1st and in 2nd we start from end.

#include <bits/stdc++.h> 
long long f(vector<int> &valueInHouse) {
    int prev = valueInHouse[0];
    int prev2 = 0;
    for(int i = 0; i < valueInHouse.size(); i++) {
        int pick = valueInHouse[i]; if(i > 1) pick += prev2;
        int notpick = 0 + prev;
        int curr = max(pick, notpick);
        prev2 = prev;
        prev = curr; 
    }
    return prev;
}
long long int houseRobber(vector<int>& valueInHouse) {
    int n = valueInHouse.size();
    vector<int> temp1, temp2;
    if(n == 1) return valueInHouse[0];
    for(int i = 0; i < n; i++) {
        if(i != 0) temp1.push_back(valueInHouse[i]);
        if(i != n-1) temp2.push_back(valueInHouse[i]);
    }
    return max(f(temp1), f(temp2));
}
