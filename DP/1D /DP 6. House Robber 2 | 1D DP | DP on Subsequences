given an 1d array, we cant rob in adjesent houses and end and first array is coneenected so either we rob from the start leaving end, or we rob end leaving first. 
we dont know in which we'll get max ans so we make arrays temp in one we start from 1st and in 2nd we start from end.

long long solve(vector<int>&valueInHouse, int start, int end) {
    long long prev= valueInHouse[start];
    long long prev2 = 0;
    for(int i=start+1; i<=end; i++) {
        long long pick = valueInHouse[i];
        if(i>start+1)
            pick+=prev2;
        long long notpick = 0+ prev;
        long long curr = max(pick,notpick);
        prev2= prev;
        prev = curr;
    }
    return prev;
}
long long int houseRobber(vector<int>& valueInHouse) {
    int n = valueInHouse.size();
    long long temp1 = solve(valueInHouse, 0, n-2);
    long long temp2 = solve(valueInHouse,1,n-1);
    return max(temp1,temp2);
}
